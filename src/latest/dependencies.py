# generated by datamodel-codegen:
#   filename:  dependencies-latest.json
#   timestamp: 2024-08-05T21:14:54+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Project(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str


class HubPackages(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    version: Union[str, float, List[Any]] = Field(
        ...,
        description='A semantic version string or range, such as [">=1.0.0", "<2.0.0"]',
        title='Package version',
    )
    install_prerelease: Optional[bool] = Field(
        None,
        alias='install-prerelease',
        description='Opt in to prerelease versions of a package',
        title='Install Prerelease',
    )
    package: str = Field(
        ...,
        description='Must be in format `org_name/package_name`. Refer to hub.getdbt.com for installation instructions',
        examples=['dbt-labs/dbt_utils'],
        pattern='^[\\w\\-\\.]+/[\\w\\-\\.]+$',
        title='Package identifier',
    )


class GitPackages(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    git: str = Field(..., title='Git URL')
    revision: Optional[str] = Field(
        None,
        description='Pin your package to a specific release by specifying a release name',
        title='Revision',
    )
    subdirectory: Optional[str] = Field(
        None,
        description='Only required if the package is nested in a subdirectory of the git project',
        title='Subdirectory',
    )


class LocalPackage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    local: Optional[str] = None


class Packages(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    packages: Optional[List[Union[HubPackages, GitPackages, LocalPackage]]] = Field(
        None, min_length=1
    )

class Dependencies(Packages):
    projects: Optional[List[Project]] = None