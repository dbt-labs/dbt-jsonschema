# generated by datamodel-codegen:
#   filename:  dbt_project-latest.json
#   timestamp: 2024-08-05T21:39:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class DbtCloud(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    project_id: Optional[float] = Field(None, alias='project-id')


class Flags(BaseModel):
    cache_selected_only: Optional[bool] = None
    debug: Optional[bool] = None
    fail_fast: Optional[bool] = None
    indirect_selection: Optional[str] = None
    log_format: Optional[str] = None
    log_format_file: Optional[str] = None
    log_level: Optional[str] = None
    log_level_file: Optional[str] = None
    partial_parse: Optional[bool] = None
    populate_cache: Optional[bool] = None
    printer_width: Optional[int] = None
    require_explicit_package_overrides_for_builtin_materializations: Optional[bool] = (
        None
    )
    require_resource_names_without_spaces: Optional[bool] = None
    send_anonymous_usage_stats: Optional[bool] = None
    source_freshness_run_project_hooks: Optional[bool] = None
    static_parser: Optional[bool] = None
    use_colors: Optional[bool] = None
    use_colors_file: Optional[bool] = None
    use_experimental_parser: Optional[bool] = None
    version_check: Optional[bool] = None
    warn_error: Optional[bool] = None
    warn_error_options: Optional[Dict[str, Any]] = None
    write_json: Optional[bool] = None


class Access(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class Alias(RootModel[str]):
    root: str


class ArrayOfStrings(RootModel[List[str]]):
    root: List[str]


class ColumnTypes(RootModel[Dict[str, str]]):
    root: Dict[str, str]


class Database(RootModel[str]):
    root: str


class DocsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    node_color: Optional[str] = Field(
        None,
        description='The color of the node on the DAG in the documentation. It must be an Hex code or a valid CSS color name.',
        pattern='^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|[^#][a-zA-Z]*)$',
    )
    show: Optional[bool] = True


class EmptyDirectory(RootModel[None]):
    root: None


class ErrorIf(RootModel[str]):
    root: str


class FailCalc(RootModel[str]):
    root: str


class FileFormat(RootModel[str]):
    root: str


class AuthorizedView(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    project: Optional[str] = None


class AuthorizedViews(RootModel[List[AuthorizedView]]):
    root: List[AuthorizedView] = Field(
        ...,
        description='Configuration, specific to BigQuery adapter, used to setup authorized views.',
        title='Authorized views',
    )


class Group(RootModel[str]):
    root: str


class HoursToExpiration(RootModel[float]):
    root: float = Field(
        ...,
        description='Configuration specific to BigQuery adapter used to set an expiration delay (in hours) to a table.',
    )


class IncrementalStrategy(RootModel[str]):
    root: str


class JinjaString(RootModel[str]):
    root: str = Field(..., pattern='\\{\\{.*\\}\\}')


class KmsKeyName(RootModel[str]):
    root: str = Field(
        ...,
        description='Configuration, specific to BigQuery adapter, of the KMS key name used for data encryption.',
    )


class LabelConfigs(RootModel[str]):
    root: str = Field(..., pattern='^[a-z0-9_-]{0,64}$')


class LabelConfigs1(RootModel[Dict[str, Union[LabelConfigs, JinjaString]]]):
    root: Dict[str, Union[LabelConfigs, JinjaString]] = Field(
        ...,
        description='Configurations specific to BigQuery adapter used to add labels and tags to tables & views created by dbt.',
        title='Label configs',
    )


class Limit(RootModel[float]):
    root: float


class Location(RootModel[str]):
    root: str


class Materialized(RootModel[str]):
    root: str


class Meta(BaseModel):
    pass


class OnConfigurationChange(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class OnSchemaChange(Enum):
    append_new_columns = 'append_new_columns'
    fail = 'fail'
    ignore = 'ignore'
    sync_all_columns = 'sync_all_columns'


class Schema(RootModel[Optional[str]]):
    root: Optional[str]


class Severity1(Enum):
    warn = 'warn'
    error = 'error'


class Severity(RootModel[Union[JinjaString, Severity1]]):
    root: Union[JinjaString, Severity1]


class SnowflakeWarehouse(RootModel[str]):
    root: str


class SqlHeader(RootModel[str]):
    root: str


class Strategy(RootModel[str]):
    root: str


class StringOrArrayOfStrings(RootModel[Union[str, ArrayOfStrings]]):
    root: Union[str, ArrayOfStrings]


class Tags(RootModel[StringOrArrayOfStrings]):
    root: StringOrArrayOfStrings


class TargetDatabase(RootModel[str]):
    root: str


class TargetLag(RootModel[str]):
    root: str = Field(
        ..., pattern='^(?:downstream|\\d+\\s*(?:seconds|minutes|hours|days))$'
    )


class TargetSchema(RootModel[str]):
    root: str


class UnitTestConfigs(BaseModel):
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    meta: Optional[Meta] = None
    tags: Optional[Tags] = None


class UpdatedAt(RootModel[str]):
    root: str


class WarnIf(RootModel[str]):
    root: str


class DispatchItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    macro_namespace: str
    search_order: ArrayOfStrings


class BooleanOrJinjaString(RootModel[Union[JinjaString, bool]]):
    root: Union[JinjaString, bool]


class Contract(BaseModel):
    enforced: BooleanOrJinjaString


class DataTestConfigs(BaseModel):
    field_alias: Optional[Alias] = Field(None, alias='+alias')
    field_database: Optional[Database] = Field(None, alias='+database')
    field_enabled: Optional[BooleanOrJinjaString] = Field(None, alias='+enabled')
    field_error_if: Optional[ErrorIf] = Field(None, alias='+error_if')
    field_fail_calc: Optional[FailCalc] = Field(None, alias='+fail_calc')
    field_group: Optional[Group] = Field(None, alias='+group')
    field_limit: Optional[Limit] = Field(None, alias='+limit')
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_schema: Optional[Schema] = Field(None, alias='+schema')
    field_severity: Optional[Severity] = Field(None, alias='+severity')
    field_store_failures: Optional[BooleanOrJinjaString] = Field(
        None, alias='+store_failures'
    )
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    field_warn_if: Optional[WarnIf] = Field(None, alias='+warn_if')
    alias: Optional[Alias] = None
    database: Optional[Database] = None
    enabled: Optional[BooleanOrJinjaString] = None
    error_if: Optional[ErrorIf] = None
    fail_calc: Optional[FailCalc] = None
    group: Optional[Group] = None
    limit: Optional[Limit] = None
    meta: Optional[Meta] = None
    schema_: Optional[Schema] = Field(None, alias='schema')
    severity: Optional[Severity] = None
    store_failures: Optional[BooleanOrJinjaString] = None
    tags: Optional[Tags] = None
    warn_if: Optional[WarnIf] = None


class Grants(RootModel[Dict[str, StringOrArrayOfStrings]]):
    root: Dict[str, StringOrArrayOfStrings] = Field(
        ...,
        description='grant config. each key is a database permission and the value is the grantee of that permission',
    )


class InvalidateHardDeletes(RootModel[BooleanOrJinjaString]):
    root: BooleanOrJinjaString


class PersistDocsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    columns: Optional[BooleanOrJinjaString] = Field(
        default_factory=lambda: BooleanOrJinjaString.model_validate(True)
    )
    relation: Optional[BooleanOrJinjaString] = Field(
        default_factory=lambda: BooleanOrJinjaString.model_validate(True)
    )


class SeedConfigs(BaseModel):
    field_column_types: Optional[ColumnTypes] = Field(None, alias='+column_types')
    field_copy_grants: Optional[BooleanOrJinjaString] = Field(
        None, alias='+copy_grants'
    )
    field_database: Optional[Database] = Field(None, alias='+database')
    field_docs: Optional[DocsConfig] = Field(None, alias='+docs')
    field_enabled: Optional[BooleanOrJinjaString] = Field(None, alias='+enabled')
    field_full_refresh: Optional[BooleanOrJinjaString] = Field(
        None, alias='+full_refresh'
    )
    field_grants: Optional[Grants] = Field(None, alias='+grants')
    field_group: Optional[Group] = Field(None, alias='+group')
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_persist_docs: Optional[PersistDocsConfig] = Field(None, alias='+persist_docs')
    field_quote_columns: Optional[BooleanOrJinjaString] = Field(
        None, alias='+quote_columns'
    )
    field_schema: Optional[Schema] = Field(None, alias='+schema')
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    field_transient: Optional[BooleanOrJinjaString] = Field(None, alias='+transient')
    column_types: Optional[ColumnTypes] = None
    copy_grants: Optional[BooleanOrJinjaString] = None
    database: Optional[Database] = None
    docs: Optional[DocsConfig] = None
    enabled: Optional[BooleanOrJinjaString] = None
    full_refresh: Optional[BooleanOrJinjaString] = None
    grants: Optional[Grants] = None
    group: Optional[Group] = None
    meta: Optional[Meta] = None
    persist_docs: Optional[PersistDocsConfig] = None
    quote_columns: Optional[BooleanOrJinjaString] = None
    schema_: Optional[Schema] = Field(None, alias='schema')
    tags: Optional[Tags] = None
    transient: Optional[BooleanOrJinjaString] = None


class SnapshotConfigs(BaseModel):
    field_alias: Optional[Alias] = Field(None, alias='+alias')
    field_check_cols: Optional[StringOrArrayOfStrings] = Field(
        None, alias='+check_cols'
    )
    field_docs: Optional[DocsConfig] = Field(None, alias='+docs')
    field_enabled: Optional[BooleanOrJinjaString] = Field(None, alias='+enabled')
    field_grants: Optional[Grants] = Field(None, alias='+grants')
    field_group: Optional[Group] = Field(None, alias='+group')
    field_invalidate_hard_deletes: Optional[InvalidateHardDeletes] = Field(
        None, alias='+invalidate_hard_deletes'
    )
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_persist_docs: Optional[PersistDocsConfig] = Field(None, alias='+persist_docs')
    field_post_hook: Optional[ArrayOfStrings] = Field(None, alias='+post-hook')
    field_pre_hook: Optional[ArrayOfStrings] = Field(None, alias='+pre-hook')
    field_quote_columns: Optional[BooleanOrJinjaString] = Field(
        None, alias='+quote_columns'
    )
    field_strategy: Optional[Strategy] = Field(None, alias='+strategy')
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    field_target_database: Optional[TargetDatabase] = Field(
        None, alias='+target_database'
    )
    field_target_schema: Optional[TargetSchema] = Field(None, alias='+target_schema')
    field_transient: Optional[BooleanOrJinjaString] = Field(None, alias='+transient')
    field_unique_key: Optional[StringOrArrayOfStrings] = Field(
        None, alias='+unique_key'
    )
    field_updated_at: Optional[UpdatedAt] = Field(None, alias='+updated_at')
    alias: Optional[Alias] = None
    check_cols: Optional[StringOrArrayOfStrings] = None
    docs: Optional[DocsConfig] = None
    enabled: Optional[BooleanOrJinjaString] = None
    grants: Optional[Grants] = None
    group: Optional[Group] = None
    invalidate_hard_deletes: Optional[InvalidateHardDeletes] = None
    meta: Optional[Meta] = None
    persist_docs: Optional[PersistDocsConfig] = None
    post_hook: Optional[ArrayOfStrings] = Field(None, alias='post-hook')
    pre_hook: Optional[ArrayOfStrings] = Field(None, alias='pre-hook')
    quote_columns: Optional[BooleanOrJinjaString] = None
    strategy: Optional[Strategy] = None
    tags: Optional[Tags] = None
    target_database: Optional[TargetDatabase] = None
    target_schema: Optional[TargetSchema] = None
    transient: Optional[BooleanOrJinjaString] = None
    unique_key: Optional[StringOrArrayOfStrings] = None
    updated_at: Optional[UpdatedAt] = None


class SourceConfigs(BaseModel):
    field_enabled: Optional[BooleanOrJinjaString] = Field(None, alias='+enabled')
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    enabled: Optional[BooleanOrJinjaString] = None
    meta: Optional[Meta] = None
    tags: Optional[Tags] = None


class QueryComment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    append: Optional[BooleanOrJinjaString] = None
    comment: Optional[str] = None
    job_label: Optional[BooleanOrJinjaString] = Field(None, alias='job-label')


class Quoting(BaseModel):
    database: Optional[BooleanOrJinjaString] = None
    identifier: Optional[BooleanOrJinjaString] = None
    schema_: Optional[BooleanOrJinjaString] = Field(None, alias='schema')


class AutoRefresh(RootModel[BooleanOrJinjaString]):
    root: BooleanOrJinjaString


class Backup(RootModel[BooleanOrJinjaString]):
    root: BooleanOrJinjaString


class ModelConfigs(BaseModel):
    field_access: Optional[Access] = Field(None, alias='+access')
    field_alias: Optional[Alias] = Field(None, alias='+alias')
    field_auto_refresh: Optional[AutoRefresh] = Field(None, alias='+auto_refresh')
    field_backup: Optional[Backup] = Field(None, alias='+backup')
    field_bind: Optional[BooleanOrJinjaString] = Field(False, alias='+bind')
    field_contract: Optional[Contract] = Field(None, alias='+contract')
    field_copy_grants: Optional[BooleanOrJinjaString] = Field(
        None, alias='+copy_grants'
    )
    field_database: Optional[Database] = Field(None, alias='+database')
    field_docs: Optional[DocsConfig] = Field(None, alias='+docs')
    field_enabled: Optional[BooleanOrJinjaString] = Field(None, alias='+enabled')
    field_file_format: Optional[FileFormat] = Field(None, alias='+file_format')
    field_full_refresh: Optional[BooleanOrJinjaString] = Field(
        None, alias='+full_refresh'
    )
    field_grant_access_to: Optional[AuthorizedViews] = Field(
        None, alias='+grant_access_to'
    )
    field_grants: Optional[Grants] = Field(None, alias='+grants')
    field_group: Optional[Group] = Field(None, alias='+group')
    field_hours_to_expiration: Optional[HoursToExpiration] = Field(
        None, alias='+hours_to_expiration'
    )
    field_incremental_strategy: Optional[IncrementalStrategy] = Field(
        None, alias='+incremental_strategy'
    )
    field_kms_key_name: Optional[KmsKeyName] = Field(None, alias='+kms_key_name')
    field_labels: Optional[LabelConfigs1] = Field(None, alias='+labels')
    field_location: Optional[Location] = Field(None, alias='+location')
    field_materialized: Optional[Materialized] = Field(None, alias='+materialized')
    field_meta: Optional[Meta] = Field(None, alias='+meta')
    field_on_configuration_change: Optional[OnConfigurationChange] = Field(
        None, alias='+on_configuration_change'
    )
    field_on_schema_change: Optional[OnSchemaChange] = Field(
        None, alias='+on_schema_change'
    )
    field_persist_docs: Optional[PersistDocsConfig] = Field(None, alias='+persist_docs')
    field_post_hook: Optional[ArrayOfStrings] = Field(None, alias='+post-hook')
    field_pre_hook: Optional[ArrayOfStrings] = Field(None, alias='+pre-hook')
    field_schema: Optional[Schema] = Field(None, alias='+schema')
    field_secure: Optional[BooleanOrJinjaString] = Field(False, alias='+secure')
    field_snowflake_warehouse: Optional[SnowflakeWarehouse] = Field(
        None, alias='+snowflake_warehouse'
    )
    field_sql_header: Optional[SqlHeader] = Field(None, alias='+sql_header')
    field_tags: Optional[Tags] = Field(None, alias='+tags')
    field_target_lag: Optional[TargetLag] = Field(None, alias='+target_lag')
    field_transient: Optional[BooleanOrJinjaString] = Field(None, alias='+transient')
    access: Optional[Access] = None
    alias: Optional[Alias] = None
    auto_refresh: Optional[AutoRefresh] = None
    backup: Optional[Backup] = None
    bind: Optional[BooleanOrJinjaString] = False
    contract: Optional[Contract] = None
    copy_grants: Optional[BooleanOrJinjaString] = None
    database: Optional[Database] = None
    docs: Optional[DocsConfig] = None
    enabled: Optional[BooleanOrJinjaString] = None
    file_format: Optional[FileFormat] = None
    full_refresh: Optional[BooleanOrJinjaString] = None
    grant_access_to: Optional[AuthorizedViews] = None
    grants: Optional[Grants] = None
    group: Optional[Group] = None
    hours_to_expiration: Optional[HoursToExpiration] = None
    incremental_strategy: Optional[IncrementalStrategy] = None
    kms_key_name: Optional[KmsKeyName] = None
    labels: Optional[LabelConfigs1] = None
    location: Optional[Location] = None
    materialized: Optional[Materialized] = None
    meta: Optional[Meta] = None
    on_configuration_change: Optional[OnConfigurationChange] = None
    on_schema_change: Optional[OnSchemaChange] = None
    persist_docs: Optional[PersistDocsConfig] = None
    post_hook: Optional[ArrayOfStrings] = Field(None, alias='post-hook')
    pre_hook: Optional[ArrayOfStrings] = Field(None, alias='pre-hook')
    schema_: Optional[Schema] = Field(None, alias='schema')
    secure: Optional[BooleanOrJinjaString] = False
    snowflake_warehouse: Optional[SnowflakeWarehouse] = None
    sql_header: Optional[SqlHeader] = None
    tags: Optional[Tags] = None
    target_lag: Optional[TargetLag] = None
    transient: Optional[BooleanOrJinjaString] = None


class DbtProject(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        protected_namespaces=[]
    )
    version: Optional[str] = None
    name: str
    analysis_paths: Optional[ArrayOfStrings] = Field(None, alias='analysis-paths')
    asset_paths: Optional[ArrayOfStrings] = Field(None, alias='asset-paths')
    clean_targets: Optional[ArrayOfStrings] = Field(None, alias='clean-targets')
    config_version: Optional[float] = Field(2, alias='config-version')
    data_tests: Optional[DataTestConfigs] = None
    dbt_cloud: Optional[DbtCloud] = Field(None, alias='dbt-cloud')
    dispatch: Optional[List[DispatchItem]] = None
    docs_paths: Optional[ArrayOfStrings] = Field(None, alias='docs-paths')
    flags: Optional[Flags] = None
    log_path: Optional[str] = Field(None, alias='log-path')
    macro_paths: Optional[ArrayOfStrings] = Field(None, alias='macro-paths')
    model_paths: Optional[ArrayOfStrings] = Field(None, alias='model-paths')
    models: Optional[ModelConfigs] = None
    on_run_end: Optional[Union[ArrayOfStrings, str]] = Field(None, alias='on-run-end')
    on_run_start: Optional[Union[ArrayOfStrings, str]] = Field(
        None, alias='on-run-start'
    )
    packages_install_path: Optional[str] = Field(None, alias='packages-install-path')
    profile: Optional[str] = None
    query_comment: Optional[Union[str, QueryComment]] = Field(
        None, alias='query-comment'
    )
    quoting: Optional[Quoting] = None
    require_dbt_version: Optional[StringOrArrayOfStrings] = Field(
        None, alias='require-dbt-version'
    )
    seed_paths: Optional[ArrayOfStrings] = Field(None, alias='seed-paths')
    seeds: Optional[SeedConfigs] = None
    snapshot_paths: Optional[ArrayOfStrings] = Field(None, alias='snapshot-paths')
    snapshots: Optional[SnapshotConfigs] = None
    sources: Optional[SourceConfigs] = None
    target_path: Optional[str] = Field(None, alias='target-path')
    test_paths: Optional[ArrayOfStrings] = Field(None, alias='test-paths')
    tests: Optional[DataTestConfigs] = None
    unit_tests: Optional[UnitTestConfigs] = None
    vars: Optional[Dict[str, Any]] = None
