models:
  - name: my_first_dbt_model
    description: "A starter dbt model"
    config:
      grants:
        privilege: role
        privileges: ["select_user", "select_cruiser"]
    columns:
      - name: id
        description: "The primary key for this table"
        tests:
          - unique
          - not_null

  - name: my_second_dbt_model
    description: "A starter dbt model"
    docs:
      show: true
      node_color: yellow
    columns:
      - name: id
        description: "The primary key for this table"
        tests:
          - unique
          - not_null

  - name: my_contracted_dbt_model
    description: "A dbt model with contracts"
    access: public
    group: analytics
    latest_version: 2
    config:
      contract: 
        enforced: true
      event_time: "created_at"
    columns:
      - name: id
        description: "The primary key for this table"
        data_type: int
        constraints: 
          - type: not_null
          - type: unique
          - type: check
            expression: (id > 0)
        tests:
          - unique
          - not_null
    versions:
      - v: 2
        columns:
          - include: '*'
            exclude: country_name
          - name: id  # included in addition the '*' set. if id were in the '*' set -> override it
            description: This is the primary key
            data_type: float
      - v: 1
        config:
          alias: dim_customers

  - name: my_model_level_contract_model
    config:
      contract:
        enforced: true
    constraints:
    - type: check
      expression: (id > 0)
    - type: primary_key
      columns: [ id ]
    - type: unique
      columns: [ color, date_day ]
      name: strange_uniqueness_requirement
  
  - name: my_materialized_view
    config:
      materialized: materialized_view
      auto_refresh: true
      backup: '{{ target.name == "prod" }}'
      target_lag: downstream
      snowflake_warehouse: my_warehouse

unit_tests:
  - name: my_first_unit_test
    expect:
      fixture: a_seed_that_points_to_expected_output
      format: csv
    given:
      - input: ref('model_b')
        rows:
          - {id: 1, code: 'abc'}
          - {id: 2, code: 'def'}
    model: my_first_dbt_model
  
  - name: my_second_unit_test
    expect:
      rows:
        - {count: 2}
      format: dict
    model: my_second_dbt_model
    config:
      tags: ['tag_1', 'tag_2']
    description: This checks the validity of the model
    overrides:
      macros: 
        is_incremental: true
      env_vars:
        my_first_var: 12345
      vars:
        my_second_var: 689
    
  - name: my_inline_csv_unit_test
    given:
      - input: ref('model_b')
        format: csv
        rows: |
          column_1,column_2,column_3
          value_1,value_2,value_3
          value_4,value_5,value_6
    model: my_model_1
    expect:
      format: csv
      rows: |
        count
        2

  - name: my_sql_unit_test
    model: unit_reworked_compare_struct
    given:
      - input: ref('unit_test_struct_model_a')
        format: sql
        rows: |
          select 1 as id, 'John Doe' as col1, object_construct('street', '123 Main St', 'city', 'Anytown', 'state', 'CA') as col2
      - input: ref('unit_test_struct_model_b')
        format: sql
        rows: |
          select 1 as id, 'John Doe' as col1, object_construct('street', '123 Main St', 'city', 'Anytown', 'state', 'CA') as col2
    expect:
      rows:
        - {"id": 1, "dbt_audit_row_status": "identical", "dbt_audit_num_rows_in_status": 1}
    overrides:
      vars:
        reworked_compare__columns: ['id', 'col1', 'col2']
        reworked_compare__event_time:
        reworked_compare__primary_key_columns: ['id']

snapshots:
  - name: snapshot_name
    group: analytics
    description: slowly changing dimension
    columns:
      - name: id 
        description: cool column, eh?

  - name: yaml_defined_snapshot
    relation: source('jaffle_shop', 'orders')
    config:
      schema: snapshots
      database: analytics
      unique_key: id
      strategy: timestamp
      updated_at: updated_at

# model groups 

groups:
  - name: analytics
    owner:
      name: dave

semantic_models:
  - name: customers
    defaults:
      agg_time_dimension: first_ordered_at
    description: |
      Customer grain mart.
    model: ref('customers')
    entities:
      - name: customer
        expr: customer_id
        type: primary
    dimensions:
      - name: customer_name
        type: categorical
      - name: customer_type
        type: categorical
      - name: first_ordered_at
        type: time
        type_params:
          time_granularity: day
      - name: last_ordered_at
        type: time
        type_params:
          time_granularity: day
    measures:
      - name: count_lifetime_orders
        description: Total count of orders per customer.
        agg: sum
      - name: lifetime_spend_pretax
        description: Customer lifetime spend before taxes.
        agg: sum
      - name: lifetime_spend
        agg: sum
        description: Gross customer lifetime spend inclusive of taxes.

metrics:
  # Simple metrics
  - name: customers_with_orders
    description: "Distict count of customers placing orders"
    type: simple
    label: Customers w/ Orders
    type_params:
      measure:
        name: customers_with_orders
        fill_nulls_with: 0
        join_to_timespine: true

  - name: new_customer
    description: Unique count of new customers.
    label: New Customers
    type: simple
    type_params:
      measure: 
        name: customers_with_orders
    filter: |
      {{ Dimension('customer__customer_type') }}  = 'new'

  - name: recurring_customer
    description: Unique count of recurring customers.
    label: Recurring Customers
    type: simple
    type_params:
      measure: customers_with_orders
    filter: |
      {{ Dimension('customer__customer_type') }}  = 'recurring'

  - name: average_transaction_total_us
    description: "The average total for each transaction in the US"
    label: Transaction Total Average US
    type: ratio
    type_params:
      numerator:
        name: transaction_total
        filter: |
          "{{ Dimension('transaction__location') }} = 'US'"
      denominator:
        name: transactions
        filter: |
          "{{ Dimension('transaction__location') }} = 'US'"

  - name: food_order_gross_profit
    label: Food order gross profit
    description: "The gross profit for each food order."
    type: derived
    type_params:
      expr: revenue - cost
      metrics:
        - name: order_total
          alias: revenue
          filter: |
            {{ Dimension('order__is_food_order') }} = True
        - name: order_cost
          alias: cost
          filter: |
            {{ Dimension('order__is_food_order') }} = True

  - name: cumulative_order_total_l1m
    label: Cumulative Order total (L1M)   
    description: Trailing 1-month cumulative order amount
    type: cumulative
    type_params:
      measure: 
        name: order_total
        fill_nulls_with: 0
      window: 1 month

  - name: visit_to_buy_conversion_rate_7_day_window
    description: "Conversion rate from viewing a page to making a purchase"
    type: conversion
    label: Visit to Seller Conversion Rate (7 day window)
    type_params:
      conversion_type_params:
        calculation: conversions
        base_measure:
          name: visits
        conversion_measure: 
          name: buys
          fill_nulls_with: 0
        entity: user
        window: 7 days 

saved_queries:
  - name: test_saved_query
    description: "{{ doc('saved_query_description') }}"
    label: Test saved query
    query_params:
      metrics:
          - simple_metric
      group_by:
          - "Dimension('user__ds')"
      where:
          - "{{ Dimension('user__ds', 'DAY') }} <= now()"
          - "{{ Dimension('user__ds', 'DAY') }} >= '2023-01-01'"
    exports:
      - name: my_export
        config:
          alias: my_export_alias
          export_as: table
          schema: my_export_schema_name


sources:
  - name: some_source_name
    loaded_at_field: _etl_loaded_at
    freshness: 
      error_after:
        count: 2
        period: day
      warn_after:
        count: 1
        period: day
    tables:
      - name: some_table_name
        config:
          event_time: "created_at"
      - name: another_table_name
        columns:
          - name: my_unique_column
            description: This sure is a column
            data_tests:
              - unique

data_tests:
  - name: my_cool_custom_test
    description: "This checks that all numbers are positive, if it fails you should talk to data engineering"