{
  "title": "dbt_yml_files",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "version": {
      "type": "number",
      "const": 2
    },
    "analyses": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "data_type": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "tags": {
                "$ref": "#/$defs/string_or_array_of_strings"
              }
            },
            "additionalProperties": false
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          }
        }
      }
    },
    "exposures": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "depends_on",
          "name",
          "owner",
          "type"
        ],
        "$comment": "NB: depends_on is not strictly required, but is _expected_ according to the documentation",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "analysis",
              "application",
              "dashboard",
              "ml",
              "notebook"
            ]
          },
          "depends_on": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "type": "string",
            "$comment": "Added in dbt Core v1.3"
          },
          "maturity": {
            "type": "string",
            "enum": [
              "high",
              "low",
              "medium"
            ]
          },
          "meta": {
            "type": "object"
          },
          "owner": {
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "groups": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name",
          "owner"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "minProperties": 1,
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        },
        "additionalProperties": false
      }
    },
    "macros": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          }
        },
        "additionalProperties": false
      }
    },
    "metrics": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "calculation_method",
          "expression",
          "label",
          "name"
        ],
        "if": {
          "properties": {
            "calculation_method": {
              "const": "derived"
            }
          }
        },
        "then": {
          "required": [
            "calculation_method",
            "expression",
            "label",
            "name"
          ]
        },
        "else": {
          "required": [
            "calculation_method",
            "expression",
            "label",
            "model",
            "name"
          ]
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "calculation_method": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "properties": {
              "enabled": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "group": {
                "type": "string"
              },
              "treat_null_values_as_zero": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              }
            }
          },
          "dimensions": {
            "$ref": "#/$defs/array_of_strings"
          },
          "expression": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "field",
                "operator",
                "value"
              ],
              "properties": {
                "field": {
                  "type": "string"
                },
                "operator": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "label": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "model": {
            "type": "string",
            "default": "ref('')"
          },
          "time_grains": {
            "$ref": "#/$defs/array_of_strings"
          },
          "timestamp": {
            "type": "string"
          },
          "window": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "period": {
                "type": "string",
                "enum": [
                  "day",
                  "month",
                  "week",
                  "year"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      }
    },
    "models": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "access": {
            "type": "string",
            "enum": [
              "private",
              "protected",
              "public"
            ]
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/column_properties"
            }
          },
          "config": {
            "$ref": "#/$defs/model_configs"
          },
          "constraints": {
            "$ref": "#/$defs/constraints"
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          },
          "group": {
            "type": "string"
          },
          "latest_version": {
            "type": "number"
          },
          "meta": {
            "type": "object"
          },
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/tests"
            }
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "v"
              ],
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/include_exclude"
                      },
                      {
                        "$ref": "#/$defs/column_properties"
                      }
                    ]
                  }
                },
                "config": {
                  "$ref": "#/$defs/model_configs"
                },
                "v": {
                  "type": "number"
                }
              }
            }
          }
        },
        "additionalProperties": false
      }
    },
    "seeds": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/column_properties"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "column_types": {
                "type": "object"
              },
              "copy_grants": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "database": {
                "type": "string"
              },
              "enabled": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "grants": {
                "$ref": "#/$defs/grants"
              },
              "quote_columns": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "schema": {
                "type": "string"
              }
            }
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          },
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/tests"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "snapshots": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/column_properties"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "alias": {
                "type": "string"
              },
              "check_cols": {
                "$ref": "#/$defs/string_or_array_of_strings"
              },
              "enabled": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "grants": {
                "$ref": "#/$defs/grants"
              },
              "persist_docs": {
                "$ref": "#/$defs/persist_docs_config"
              },
              "post-hook": {
                "$ref": "#/$defs/array_of_strings"
              },
              "pre-hook": {
                "$ref": "#/$defs/array_of_strings"
              },
              "quote_columns": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "strategy": {
                "type": "string"
              },
              "tags": {
                "$ref": "#/$defs/string_or_array_of_strings"
              },
              "target_database": {
                "type": "string"
              },
              "target_schema": {
                "type": "string"
              },
              "unique_key": {
                "$ref": "#/$defs/string_or_array_of_strings"
              },
              "updated_at": {
                "type": "string"
              }
            }
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          },
          "meta": {
            "type": "object"
          },
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/tests"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "sources": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "How you will identify the schema in {{ source() }} calls. Unless `schema` is also set, this will be the name of the schema in the database.",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "config": {
            "type": "object"
          },
          "database": {
            "type": "string"
          },
          "freshness": {
            "$ref": "#/$defs/freshness_definition"
          },
          "loaded_at_field": {
            "type": "string"
          },
          "loader": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "overrides": {
            "title": "Package to Override",
            "description": "The name of another package installed in your project. If that package has a source with the same name as this one, its properties will be applied on top of the base properties of the overridden source. https://docs.getdbt.com/reference/resource-properties/overrides",
            "type": "string"
          },
          "quoting": {
            "type": "object",
            "properties": {
              "database": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "identifier": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "schema": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              }
            },
            "additionalProperties": false
          },
          "schema": {
            "description": "The schema name as stored in the database. Only needed if you want to use a different `name` than what exists in the database (otherwise `name` is used by default)",
            "type": "string"
          },
          "tables": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "title": "Name",
                  "description": "How you will identify the table in {{ source() }} calls. Unless `identifier` is also set, this will be the name of the table in the database.",
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "columns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/column_properties"
                  }
                },
                "external": {
                  "type": "object"
                },
                "freshness": {
                  "$ref": "#/$defs/freshness_definition"
                },
                "identifier": {
                  "title": "Identifier",
                  "description": "The table name as stored in the database. Only needed if you want to give the source a different name than what exists in the database (otherwise `name` is used by default)",
                  "type": "string"
                },
                "loaded_at_field": {
                  "description": "Which column to check during data freshness tests. Only needed if the table has a different loaded_at_field to the one defined on the source overall.",
                  "type": "string"
                },
                "loader": {
                  "type": "string"
                },
                "meta": {
                  "type": "object"
                },
                "quoting": {
                  "type": "object",
                  "properties": {
                    "database": {
                      "$ref": "#/$defs/boolean_or_jinja_string"
                    },
                    "identifier": {
                      "$ref": "#/$defs/boolean_or_jinja_string"
                    },
                    "schema": {
                      "$ref": "#/$defs/boolean_or_jinja_string"
                    }
                  },
                  "additionalProperties": false
                },
                "tags": {
                  "$ref": "#/$defs/string_or_array_of_strings"
                },
                "tests": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/tests"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/tests"
            }
          }
        }
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "array_of_strings": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "boolean_or_jinja_string": {
      "oneOf": [
        {
          "$ref": "#/$defs/jinja_string"
        },
        {
          "type": "boolean"
        }
      ],
      "additionalProperties": false
    },
    "column_properties": {
      "type": "object",
      "required": [
        "name"
      ],
      "uniqueItems": true,
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "constraints": {
          "$ref": "#/$defs/constraints"
        },
        "data_type": {
          "type": "string"
        },
        "meta": {
          "type": "object"
        },
        "policy_tags": {
          "title": "Policy tags",
          "description": "Configurations, specific to BigQuery adapter, used to set policy tags on specific columns, enabling column-level security. Only relevant when `persist_docs.columns` is true.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quote": {
          "$ref": "#/$defs/boolean_or_jinja_string"
        },
        "tags": {
          "$ref": "#/$defs/string_or_array_of_strings"
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/tests"
          }
        }
      },
      "additionalProperties": false
    },
    "constraints": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "columns": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "expression": {
            "type": "string"
          },
          "warn_unenforced": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "warn_unsupported": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          }
        }
      }
    },
    "docs_config": {
      "title": "Docs config",
      "description": "Configurations for the appearance of nodes in the dbt documentation.",
      "type": "object",
      "properties": {
        "node_color": {
          "description": "The color of the node on the DAG in the documentation. It must be an Hex code or a valid CSS color name.",
          "type": "string",
          "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|[^#][a-zA-Z]*)$"
        },
        "show": {
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "freshness_definition": {
      "default": {
        "error_after": {
          "count": 2,
          "period": "day"
        },
        "warn_after": {
          "count": 1,
          "period": "day"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "error_after": {
              "$ref": "#/$defs/freshness_rules"
            },
            "filter": {
              "type": "string"
            },
            "warn_after": {
              "$ref": "#/$defs/freshness_rules"
            }
          },
          "additionalProperties": false
        },
        {
          "const": null
        }
      ]
    },
    "freshness_rules": {
      "type": "object",
      "required": [
        "count",
        "period"
      ],
      "properties": {
        "count": {
          "$ref": "#/$defs/number_or_jinja_string"
        },
        "period": {
          "type": "string",
          "enum": [
            "day",
            "hour",
            "minute"
          ]
        }
      },
      "additionalProperties": false
    },
    "grants": {
      "description": "grant config. each key is a database permission and the value is the grantee of that permission",
      "type": "object",
      "patternProperties": {
        ".*": {
          "$ref": "#/$defs/string_or_array_of_strings"
        }
      },
      "additionalProperties": false
    },
    "include_exclude": {
      "type": "object",
      "properties": {
        "exclude": {
          "$ref": "#/$defs/string_or_array_of_strings"
        },
        "include": {
          "$ref": "#/$defs/string_or_array_of_strings"
        }
      }
    },
    "jinja_string": {
      "type": "string",
      "pattern": "\\{\\{.*\\}\\}"
    },
    "model_configs": {
      "type": "object",
      "properties": {
        "contract": {
          "type": "object",
          "properties": {
            "enforced": {
              "$ref": "#/$defs/boolean_or_jinja_string"
            }
          }
        },
        "file_format": {
          "type": "string"
        },
        "grant_access_to": {
          "title": "Authorized views",
          "description": "Configuration, specific to BigQuery adapter, used to setup authorized views.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "database",
              "project"
            ],
            "properties": {
              "database": {
                "type": "string"
              },
              "project": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "grants": {
          "$ref": "#/$defs/grants"
        },
        "hours_to_expiration": {
          "description": "Configuration specific to BigQuery adapter used to set an expiration delay (in hours) to a table.",
          "type": "number"
        },
        "kms_key_name": {
          "description": "Configuration of the KMS key name, specific to BigQuery adapter.",
          "type": "string",
          "pattern": "projects/[a-zA-Z0-9_-]*/locations/[a-zA-Z0-9_-]*/keyRings/.*/cryptoKeys/.*"
        },
        "labels": {
          "title": "Label configs",
          "description": "Configuration specific to BigQuery adapter used to add labels and tags to tables/views created by dbt.",
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z0-9_-]{0,62}$": {
              "type": "string",
              "pattern": "^[a-z0-9_-]{0,63}$"
            }
          },
          "additionalProperties": false
        },
        "location": {
          "type": "string"
        },
        "materialized": {
          "type": "string"
        },
        "sql_header": {
          "type": "string"
        }
      }
    },
    "number_or_jinja_string": {
      "oneOf": [
        {
          "$ref": "#/$defs/jinja_string"
        },
        {
          "type": "number"
        }
      ],
      "additionalProperties": false
    },
    "persist_docs_config": {
      "title": "Persist docs config",
      "description": "Configurations for the persistence of the dbt documentation.",
      "type": "object",
      "properties": {
        "columns": {
          "$ref": "#/$defs/boolean_or_jinja_string",
          "default": true
        },
        "relation": {
          "$ref": "#/$defs/boolean_or_jinja_string",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "string_or_array_of_strings": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/array_of_strings"
        }
      ]
    },
    "test_configs": {
      "title": "Test configs",
      "description": "Configurations set here will override configs set in dbt_project.yml.",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Only relevant when `store_failures` is true",
          "type": "string"
        },
        "database": {
          "description": "Only relevant when `store_failures` is true",
          "type": "string"
        },
        "enabled": {
          "$ref": "#/$defs/boolean_or_jinja_string"
        },
        "error_if": {
          "type": "string"
        },
        "fail_calc": {
          "type": "string"
        },
        "limit": {
          "type": "number"
        },
        "schema": {
          "description": "Only relevant when `store_failures` is true",
          "type": "string"
        },
        "severity": {
          "oneOf": [
            {
              "$ref": "#/$defs/jinja_string"
            },
            {
              "type": "string",
              "enum": [
                "error",
                "warn"
              ]
            }
          ]
        },
        "store_failures": {
          "$ref": "#/$defs/boolean_or_jinja_string"
        },
        "tags": {
          "$ref": "#/$defs/string_or_array_of_strings"
        },
        "warn_if": {
          "type": "string"
        }
      }
    },
    "tests": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "title": "Relationships Test",
          "type": "object",
          "properties": {
            "relationships": {
              "type": "object",
              "required": [
                "field",
                "to"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "config": {
                  "$ref": "#/$defs/test_configs"
                },
                "field": {
                  "title": "Relationships: Field",
                  "description": "The foreign key column",
                  "type": "string",
                  "default": "<FOREIGN_KEY_COLUMN>"
                },
                "to": {
                  "type": "string",
                  "default": "ref('')",
                  "examples": [
                    "ref('parent_model')",
                    "source('parent_schema', 'parent_table')"
                  ]
                },
                "where": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "title": "Accepted Values Test",
          "type": "object",
          "properties": {
            "accepted_values": {
              "type": "object",
              "required": [
                "values"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "config": {
                  "$ref": "#/$defs/test_configs"
                },
                "quote": {
                  "type": "boolean"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "where": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "title": "Not Null Test",
          "type": "object",
          "properties": {
            "not_null": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "config": {
                  "$ref": "#/$defs/test_configs"
                },
                "where": {
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "title": "Unique Test",
          "type": "object",
          "properties": {
            "unique": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "config": {
                  "$ref": "#/$defs/test_configs"
                },
                "where": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    }
  }
}